def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    my_list_1 = [0, 1]
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)

#Result:  Print #1: [2, 3]
          Print #2: [2, 3]
          Print #3: [0, 1]
          Print #4: [2, 3]
          Print #5: [2, 3]
# my_list_1 is just a temporary name for my_list_2 in the function. That's why you see [2, 3] â€“ it's the value passed in as an argument.


#############################################################################################################################################################################################

def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    del my_list_1[0]  # Pay attention to this line.
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)

#Result:  Print #1: [2, 3]         # my_list_1 gets [2, 3] from my_list_2 when you call the function.
          Print #2: [2, 3]         # my_list_2 is the global variable, still [2, 3].
          Print #3: [3]            # my_list_1 is now [3] after the deletion --> del my_list_1[0]
          Print #4: [3]            # my_list_2 globally has also changed, being the same object.
          Print #5: [3]            # my_list_2 outside the function is still [3], because it was modified by my_list_1.

# del my_list_1[0] delete the first element for the rest of the lists
# if the argument is a list, then changing the value of the corresponding parameter doesn't affect the list (remember: variables containing lists are stored in a different way than scalars),
# but if you change a list identified by the parameter (note: the list, not the parameter!), the list will reflect the change.

