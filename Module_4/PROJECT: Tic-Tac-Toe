from random import randrange

# Inițializează tabla cu numere de la 1 la 9
def initialize_board():
    return [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

# Afișează tabla
def display_board(board):
    for row in board:
        print("+-------+-------+-------+")
        print("|       |       |       |")
        print("|  ", end="")
        for col in row:
            print(f"{col:^5}", end=" | ")
        print("\n|       |       |       |")
    print("+-------+-------+-------+")

# Verifică dacă mai sunt mutări disponibile
def is_board_full(board):
    for row in board:
        for cell in row:
            if isinstance(cell, int):  # Dacă e număr, e liber
                return False
    return True

# Verifică dacă există un câștigător
def check_winner(board, player):
    # Verifică rânduri
    for row in board:
        if row == [player, player, player]:
            return True
    # Verifică coloane
    for col in range(3):
        if board[0][col] == board[1][col] == board[2][col] == player:
            return True
    # Verifică diagonale
    if board[0][0] == board[1][1] == board[2][2] == player:
        return True
    if board[0][2] == board[1][1] == board[2][0] == player:
        return True
    return False

# Transformă numărul mutării în coordonate (rând, coloană)
def move_to_coords(move):
    move -= 1  # Ajustăm pentru indexare de la 0
    row = move // 3
    col = move % 3
    return row, col

# Verifică dacă mutarea e validă
def is_valid_move(board, move):
    if not (1 <= move <= 9):
        return False
    row, col = move_to_coords(move)
    return isinstance(board[row][col], int)  # E validă doar dacă e număr (liber)

# Mutarea calculatorului
def computer_move(board):
    # Prima mutare e mereu în mijloc (5)
    if board[1][1] == 5:
        board[1][1] = 'X'
        return
    # Altfel, alege random o poziție liberă
    while True:
        move = randrange(1, 10)
        if is_valid_move(board, move):
            row, col = move_to_coords(move)
            board[row][col] = 'X'
            break

# Mutarea utilizatorului
def user_move(board):
    while True:
        try:
            move = int(input("Enter your move: "))
            if is_valid_move(board, move):
                row, col = move_to_coords(move)
                board[row][col] = 'O'
                break
            else:
                print("Invalid move! Try again.")
        except ValueError:
            print("Please enter a number between 1 and 9.")

# Jocul principal
def play_game():
    board = initialize_board()
    computer_move(board)  # Calculatorul începe cu X în mijloc
    display_board(board)

    while True:
        # Mutarea utilizatorului
        user_move(board)
        display_board(board)
        
        # Verifică dacă utilizatorul a câștigat
        if check_winner(board, 'O'):
            print("You won!")
            break
        
        # Verifică dacă tabla e plină (remiză)
        if is_board_full(board):
            print("It's a tie!")
            break
        
        # Mutarea calculatorului
        computer_move(board)
        display_board(board)
        
        # Verifică dacă calculatorul a câștigat
        if check_winner(board, 'X'):
            print("Computer wins!")
            break
        
        # Verifică din nou remiza după mutarea calculatorului
        if is_board_full(board):
            print("It's a tie!")
            break

# Pornește jocul
play_game()
