#Let's create an triangle:
# We know from school that the sum of two arbitrary sides has to be longer than the third side.

def is_a_triangle(a, b, c):
    if a + b <= c:
        return False
    if b + c <= a:
        return False
    if c + a <= b:
        return False
    return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))

#Return: True
         False

#############################################################################################################################################################################################

  #Let's make this a little bit compact:

def is_a_triangle(a, b, c):
    if a + b <= c or b + c <= a or c + a <= b:
        return False
    return True


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))

#Return: True
         False

#############################################################################################################################################################################################
  #More compact:
def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


print(is_a_triangle(1, 1, 1))
print(is_a_triangle(1, 1, 3))
#Return: True
         False


#We've negated the condition (reversed the relational operators and replaced ors with ands, receiving a universal expression for testing triangles).
#############################################################################################################################################################################################

                                                        # Some simple functions: triangles and the Pythagorean theorem
def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


def is_a_right_triangle(a, b, c):
    if not is_a_triangle(a, b, c):
        return False
    if c > a and c > b:
        return c ** 2 == a ** 2 + b ** 2
    if a > b and a > c:
        return a ** 2 == b ** 2 + c ** 2


print(is_a_right_triangle(5, 3, 4))
print(is_a_right_triangle(1, 3, 4))
#Return: True
         False

#############################################################################################################################################################################################

def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


a = float(input('Enter the first side\'s length: '))   # Set a number, for example 1
b = float(input('Enter the second side\'s length: '))  # Set a number, for example 2
c = float(input('Enter the third side\'s length: '))   # Set a number, for example 5

if is_a_triangle(a, b, c):
    print('Yes, it can be a triangle.')
else:
    print('No, it can\'t be a triangle.')

#Return: Enter the first side's length: 1
         Enter the second side's length: 2
         Enter the third side's length: 5
         No, it can't be a triangle.

#############################################################################################################################################################################################

        # Some simple functions: evaluating a triangle's area
def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


a = float(input('Enter the first side\'s length: '))
b = float(input('Enter the second side\'s length: '))
c = float(input('Enter the third side\'s length: '))

if is_a_triangle(a, b, c):
    print('Yes, it can be a triangle.')
else:
    print('No, it can\'t be a triangle.')
#Return: Enter the first side's length: 50
         Enter the second side's length: 20
         Enter the third side's length: 10
         No, it can't be a triangle.

#############################################################################################################################################################################################
def is_a_triangle(a, b, c):
    return a + b > c and b + c > a and c + a > b


def heron(a, b, c):
    p = (a + b + c) / 2
    return (p * (p - a) * (p - b) * (p - c)) ** 0.5


def area_of_triangle(a, b, c):
    if not is_a_triangle(a, b, c):
        return None
    return heron(a, b, c)


print(area_of_triangle(1., 1., 2. ** .5))

# Return: 0.49999999999999983
# It's very close to 0.5, but it isn't exactly 0.5. What does it mean? Is it an error?
# No, it isn't. This is the specifics of floating-point calculations. We'll tell you more about it soon.

#############################################################################################################################################################################################
        # Factorial things:
def factorial_function(n):
    if n < 0:
        return None
    if n < 2:
        return 1
    
    product = 1
    for i in range(2, n + 1):
        product *= i
    return product


for n in range(1, 6):  # testing
    print(n, factorial_function(n))
# Return: 1 1
          2 2
          3 6
          4 24
          5 120

#############################################################################################################################################################################################
                  # Fibonacci numbers
def fib(n):
    if n < 1:
        return None
    if n < 3:
        return 1

    elem_1 = elem_2 = 1
    the_sum = 0
    for i in range(3, n + 1):
        the_sum = elem_1 + elem_2
        elem_1, elem_2 = elem_2, the_sum
    return the_sum


for n in range(1, 10):  # testing
    print(n, "->", fib(n))

#Return: 1 -> 1
         2 -> 1
         3 -> 2
         4 -> 3
         5 -> 5
         6 -> 8
         7 -> 13
         8 -> 21
         9 -> 34
#############################################################################################################################################################################################
      # Recursion:
def factorial_function(n):
    if n < 1:
         return None
    if n < 3:
        return 1
    return n * factorial_function(n - 1)

    elem_1 = elem_2 = 1
    the_sum = 0
    for i in range(3, n + 1):
        the_sum = elem_1 + elem_2
        elem_1, elem_2 = elem_2, the_sum
    return the_sum


for n in range(1, 10):
    print(n, "->", factorial_function(n))

#Return:
1 -> 1
2 -> 1
3 -> 3
4 -> 12
5 -> 60
6 -> 360
7 -> 2520
8 -> 20160
9 -> 181440

#############################################################################################################################################################################################

# Recursive implementation of the factorial function.

def factorial(n):
    if n == 1:    # The base case (termination condition.)
        return 1
    else:
        return n * factorial(n - 1)


print(factorial(4)) # 4 * 3 * 2 * 1 = 24

#############################################################################################################################################################################################
      Exercise 1:
def factorial(n):
    return n * factorial(n - 1)


print(factorial(4)) 

#Return: The factorial function has no termination condition (no base case) so Python will raise an exception (RecursionError: maximum recursion depth exceeded)
#############################################################################################################################################################################################
      Exercise 2:
def fun(a):
    if a > 30:
        return 3
    else:
        return a + fun(a + 3)


print(fun(25))

#Return: 





