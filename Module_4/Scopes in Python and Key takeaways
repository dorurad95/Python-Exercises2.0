def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    my_list_1 = [0, 1]
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)

#Result:  Print #1: [2, 3]
          Print #2: [2, 3]
          Print #3: [0, 1]
          Print #4: [2, 3]
          Print #5: [2, 3]
# my_list_1 is just a temporary name for my_list_2 in the function. That's why you see [2, 3] â€“ it's the value passed in as an argument.


#############################################################################################################################################################################################

def my_function(my_list_1):
    print("Print #1:", my_list_1)
    print("Print #2:", my_list_2)
    del my_list_1[0]  # Pay attention to this line.
    print("Print #3:", my_list_1)
    print("Print #4:", my_list_2)


my_list_2 = [2, 3]
my_function(my_list_2)
print("Print #5:", my_list_2)

#Result:  Print #1: [2, 3]         # my_list_1 gets [2, 3] from my_list_2 when you call the function.
          Print #2: [2, 3]         # my_list_2 is the global variable, still [2, 3].
          Print #3: [3]            # my_list_1 is now [3] after the deletion --> del my_list_1[0]
          Print #4: [3]            # my_list_2 globally has also changed, being the same object.
          Print #5: [3]            # my_list_2 outside the function is still [3], because it was modified by my_list_1.

# del my_list_1[0] delete the first element for the rest of the lists
# if the argument is a list, then changing the value of the corresponding parameter doesn't affect the list (remember: variables containing lists are stored in a different way than scalars),
# but if you change a list identified by the parameter (note: the list, not the parameter!), the list will reflect the change.

##########################################################################################################################################################################################################################################################################################################################################################################################
                            KEY TAKEAWAYS
############  Example 1:
# A variable that exists outside a function has a scope inside the function body (Example 1) unless the function defines a variable of the same name (Example 2, and Example 3), e.g.:

var = 2


def mult_by_var(x):
    return x * var


print(mult_by_var(7))    # outputs: 14

############  Example 2:
def mult(x):
    var = 5
    return x * var


print(mult(7))    # outputs: 35

############  Example 3:
def mult(x):
    var = 7
    return x * var


var = 3
print(mult(7))    # outputs: 49

############  Example 4:
#A variable that exists inside a function has a scope inside the function body (Example 4), e.g.:
def adding(x):
    var = 7
    return x + var


print(adding(4))    # outputs: 11
print(var)    # NameError

## You can use the global keyword followed by a variable name to make the variable's scope global, e.g.:
var = 2
print(var)    # outputs: 2


def return_var():
    global var
    var = 5
    return var


print(return_var())    # outputs: 5
print(var)    # outputs: 5

####################### Exercise1:
def message():
    alt = 1
    print("Hello, World!")


print(alt)
## Return: error because alt is not defined.

######################### Exercise 2:
a = 1


def fun():
    a = 2
    print(a)


fun()
print(a)
#Return: 2
         1

###################### Exercise 3:
a = 1


def fun():
    global a
    a = 2
    print(a)


fun()
a = 3
print(a)
#Return: 2
         3

#################### Exercise 4:
a = 1


def fun():
    global a
    a = 2
    print(a)


a = 3
fun()
print(a)
#Return: 2
         2
#If a were not global, a = 2 would have created a local variable, and global a would have remained 3. The output would have been "2 3".



